#include <stdio.h>
#include <stdlib.h>
/*
4 - Faça duas funções que recebem um vetor com 4 posições que contém o valor da
distância de um pequeno robô até cada um dos seus 4 lados. A primeira função
deve retornar a direção de maior distância ("Direita", "Esquerda", "Frente",
"Tras") e a segunda função deve retornar esta maior distância.
*/
int main(void) {
  int posicoes[4];
  int i;
  int dist_maxima, resultado;
  int direita, esquerda, frente, tras;
  // chama função valor_max() e recebe o retorno
  resultado = valor_max(dist_maxima);
  // input dos valores
  for (i = 0; i <= 3; i++) {
    printf("Digite um valor: ");
    scanf("%d", &posicoes[i]);
    printf("valor digitado: %d\n", posicoes[i]);
  }

  // output dos valores
  for (i = 0; i <= 3; i++) {
    printf("vetor %d: %d\n", i, posicoes[i]);
  }
  direita = posicoes[0];
  esquerda = posicoes[1];
  frente = posicoes[2];
  tras = posicoes[3];
  // percorrendo o vetor para encontrar a distância máxima
  dist_maxima = posicoes[0];
  for (i = 0; i <= 3; i++) {
    if (dist_maxima < posicoes[i])
      dist_maxima = posicoes[i];
  }
  if (dist_maxima == posicoes[0])
    printf("A distância máxima é a direita\n");
  else if (dist_maxima == posicoes[1])
    printf("A distância máxima é a esquerda\n");
  else if (dist_maxima == posicoes[2])
    printf("A distância máxima é a frente\n");
  else
    printf("A distância maior é a trás\n");
  printf("O valor máximo da distância é: %d", dist_maxima);
  return 0;
}

int valor_max(int dist_maxima) {
  int resultado;
  resultado = dist_maxima;
  // retorna o valor para a função main
  return (resultado);
}


//segundo código mais legível e seguindo as exemplificações passadas pelo professor, dessa vez em C++

#include <iostream>
using namespace std;
#include <string>

string maxDirection(int vector[]){
  string direction;
  if (vector[0] > vector [1] && vector [0] > vector[2] && vector [0] > vector [3]){
    direction = "Direita";
    return direction;
  }  else if  (vector[1] > vector [0] && vector [1] > vector[2] && vector [1] > vector[3]){
    direction = "Esquerda";
    return direction;
  }  else if  (vector[2] > vector [0] && vector [2] > vector[1] && vector [2] > vector [3]){
    direction = "Frente";
    return direction;
  }  else if  (vector[3] > vector [0] && vector [3] > vector[1] && vector [3]  > vector [2]){
    direction = "Trás";
    return direction;
}
}

int maxDistance(int vector[]){
  // Escreva a função aqui
  int max = -1;
  for (int i = 0; i <= 3; i++){
    if (vector[i] > max){
      max = vector[i];
    }
  }
  return max;
}


int main(){
  //Considere valores de distância inteiros entre 0 e 100
  // "Direita", "Esquerda", "Frente", "Tras"
  int positions [4] = {0, 20, 100, 50};
  cout << maxDirection(positions) << endl;
  //valor esperado: Frente
  cout << maxDistance(positions) << endl;
  //valor esperado: 100
  
  // "Direita", "Esquerda", "Frente", "Tras"
  int positions2 [4] = {95, 70, 80, 50};
  cout << maxDirection(positions2) << endl;
  //valor esperado: Direita
  cout << maxDistance(positions2) << endl;
  //valor esperado: 95
  
  // "Direita", "Esquerda", "Frente", "Tras"
  int positions3 [4] = {10, 0, 50, 60};
  cout << maxDirection(positions3) << endl;
  //valor esperado: Tras
  cout << maxDistance(positions3) << endl;
  //valor esperado: 60
  
  // "Direita", "Esquerda", "Frente", "Tras"
  int positions4 [4] = {54, 55, 30, 0};
  cout << maxDirection(positions4) << endl;
  //valor esperado: Esquerda
  cout << maxDistance(positions4) << endl;
  //valor esperado: 55
  return 0;
}
